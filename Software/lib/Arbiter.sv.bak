module Arbiter
#(
	DeviceMaxNumber = 4
)
(
	input  clk,			// System clock
	input  Reset,       // Active High
	
// - - - HandShake Begin - - - //
// Requestes from Master devices to bus access to 
	input  BARQ[DeviceMaxNumber-1..0],

// Bus Access Granted 
	output BAGD[DeviceMaxNumber-1..0],

// Negotiation signals

	output AddressValid, 	// Target Address Decode
	input  TargetReady,	// Target Device Ready when addr decoded
	output DataStrobe,	// One clock HIGH when Target Ready
 
// - - - End of HandShake - - - //

	output Error		// One clock HIGH when Strobe at Timout 
);

bit End_Cycle;

bit [DeviceMaxNumber-1:0] BARQ_inBuff_q;

bit [DeviceMaxNumber-1:0] BAGD_outBuff_q;
bit [DeviceMaxNumber-1:0] BAGD_outBuff_d;

bit [DeviceMaxNumber-1:0] Mask_Buff_q;

/*=================================================================*\
 - - - - - - - - - Bus connection begin - - - - - - - - - - - - - - -
\*=================================================================*/

REG #(.W(DeviceMaxNumber)) 
			BARQ_inBuff // Input sampling
(
	.clk	(clk),
	.ena	(1'b1),
	.clrn	(~Mask_Buff_q),
	.d		(BARQ),
	.q		(BARQ_inBuff_q)
);

REG #(.W(DeviceMaxNumber)) 
			BAGD_outBuff
(
	.clk	(clk),
	.ena	(1'b1),
	.clrn	(!End_Cycle),
	.d		(BAGD_outBuff_d),
	.q		(BAGD_outBuff_q)
);

assign BAGD = BAGD_outBuff_q;

REG #(.W(DeviceMaxNumber)) 
			Mask_Buff
(
	.clk	(clk),
	.ena	(DataStr_Trig_q),
	.clrn	(!End_Cycle),
	.d		(BAGD_outBuff_q),
	.q		(Mask_Buff_q)
);

genvar i;
generate

      for (i = 0; i < (DeviceMaxNumber-1); i = i + 1)
      begin
      	if(BARQ_inBuff_q[i])
			BAGD_outBuff_d = DeviceMaxNumber'b1 << i;
		


      end

endgenerate




-- Priority Encoder to ensure single active BAGD
  FOR j IN 0 TO (DeviceMaxNumber-2) GENERATE
     wire_AND[j] = BARQ_inBuff[j].q;
     FOR i IN j TO (DeviceMaxNumber-2) GENERATE
        wire_AND[j] = !BARQ_inBuff[i+1].q;
     END GENERATE;
     IF wire_AND[j] == VCC THEN BAGD_outBuff[j].d = VCC; 
                           ELSE BAGD_outBuff[j].d = GND;
     END IF;
  END GENERATE;

  
  
  
endmodule:Arbiter